@model Car_Rental_Management.Models.Booking

@{
    ViewData["Title"] = "Payment";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />

<div class="container my-5 animate-bottom">
    <div class="card shadow-lg border-0">
        <!-- Header -->
        <div class="card-header bg-primary text-white text-center">
            <h3 class="mb-0"><i class="bi bi-credit-card-2-front-fill"></i> Payment for Booking #@Model.BookingID</h3>
        </div>

        <!-- Booking Details -->
        <div class="card-body">
            <div class="row mb-4">
                <div class="col-md-4 text-center">
                    <img src="@(Model.Car.ImageUrl ?? "/images/default-car.png")" class="img-fluid rounded shadow-sm" alt="Car Image" style="max-height:180px;">
                </div>
                <div class="col-md-8">
                    <h5 class="card-title">Booking Summary</h5>
                    <p><strong>Car:</strong> @Model.Car.CarModel.Brand @Model.Car.CarModel.ModelName</p>
                    <p><strong>Total Amount:</strong> <span class="text-success fs-5 fw-bold">Rs. @Model.TotalAmount:N2</span></p>
                </div>
            </div>

            <!-- Payment Form -->
            <form asp-action="Confirm" method="post" class="needs-validation" novalidate>
                <input type="hidden" name="bookingId" value="@Model.BookingID" />

                <!-- Payment Method -->
                <div class="mb-3">
                    <label class="form-label fw-semibold">Choose Payment Method:</label><br />
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="paymentType" id="cashRadio" value="Cash" checked>
                        <label class="form-check-label" for="cashRadio">Cash</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="paymentType" id="cardRadio" value="Card">
                        <label class="form-check-label" for="cardRadio">Card</label>
                    </div>
                </div>

                <!-- Card Details -->
                <div id="cardFields" style="display:none;">
                    <div class="mb-3 position-relative">
                        <label for="cardNumber" class="form-label">Card Number</label>
                        <input name="cardNumber" id="cardNumber" class="form-control"
                               pattern="\d{4}\s\d{4}\s\d{4}\s\d{4}"
                               placeholder="1234 5678 9012 3456" />
                        <div class="invalid-feedback">Enter a valid 16-digit card number.</div>
                        <span id="cardTypeIcon" class="position-absolute top-50 end-0 translate-middle-y pe-3 fs-4"></span>
                    </div>
                    <div class="row g-3 mb-3">
                        <div class="col-md-6">
                            <label for="expiry" class="form-label">Expiry (MM/YY)</label>
                            <input name="expiry" id="expiry" class="form-control" pattern="(0[1-9]|1[0-2])\/\d{2}" placeholder="MM/YY" />
                            <div class="invalid-feedback">Enter a valid expiry date.</div>
                        </div>
                        <div class="col-md-6">
                            <label for="cvv" class="form-label">CVV</label>
                            <input name="cvv" id="cvv" class="form-control" pattern="\d{3}" placeholder="123" />
                            <div class="invalid-feedback">Enter a valid 3-digit CVV.</div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="cardName" class="form-label">Name on Card</label>
                        <input name="cardName" id="cardName" class="form-control" />
                        <div class="invalid-feedback">Enter the cardholder's name.</div>
                    </div>
                </div>

                <!-- Disclaimer -->
                <div class="form-check mb-3">
                    <input type="checkbox" class="form-check-input" id="disclaimerCheck">
                    <label class="form-check-label" for="disclaimerCheck">
                        I agree to the no-refund policy
                    </label>
                </div>

                <button type="submit" class="btn btn-success btn-lg w-100">Pay Now</button>
            </form>
        </div>

        <div class="card-footer text-center text-muted small">
            <i class="bi bi-info-circle-fill"></i> All payments are secure and encrypted.
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Detect card type
        function getCardType(number) {
            number = number.replace(/\s/g, "");
            if (/^4/.test(number)) return "visa";
            if (/^5[1-5]/.test(number)) return "mastercard";
            if (/^3[47]/.test(number)) return "amex";
            if (/^6(?:011|5)/.test(number)) return "discover";
            return "";
        }

        const cardNumber = document.getElementById("cardNumber");
        const cardTypeIcon = document.getElementById("cardTypeIcon");
        const expiry = document.getElementById("expiry");
        const cvv = document.getElementById("cvv");
        const radios = document.querySelectorAll('input[name="paymentType"]');
        const cardFields = document.getElementById('cardFields');

        // Card Number formatting + detection
        cardNumber.addEventListener("input", () => {
            let value = cardNumber.value.replace(/\D/g, "").substring(0, 16);
            let formatted = value.match(/.{1,4}/g);
            cardNumber.value = formatted ? formatted.join(" ") : "";

            const type = getCardType(value);
            switch (type) {
                case "visa":
                    cardTypeIcon.innerHTML = '<i class="bi bi-credit-card-2-front text-primary"></i> <span class="text-primary">Visa</span>';
                    break;
                case "mastercard":
                    cardTypeIcon.innerHTML = '<i class="bi bi-credit-card-fill text-danger"></i> <span class="text-danger">MasterCard</span>';
                    break;
                case "amex":
                    cardTypeIcon.innerHTML = '<i class="bi bi-credit-card text-info"></i> <span class="text-info">Amex</span>';
                    break;
                case "discover":
                    cardTypeIcon.innerHTML = '<i class="bi bi-credit-card text-warning"></i> <span class="text-warning">Discover</span>';
                    break;
                default:
                    cardTypeIcon.innerHTML = "";
            }
            validateField(cardNumber);
        });

        // Expiry auto format
        expiry.addEventListener("input", () => {
            let value = expiry.value.replace(/\D/g, "");
            if (value.length > 4) value = value.substring(0, 4);
            if (value.length > 2) value = value.substring(0, 2) + "/" + value.substring(2);
            expiry.value = value;
            validateField(expiry);
        });

        // CVV validation
        cvv.addEventListener("input", () => {
            cvv.value = cvv.value.replace(/\D/g, "").substring(0, 3);
            validateField(cvv);
        });

        // Toggle card fields
        radios.forEach(r => {
            r.addEventListener('change', () => {
                cardFields.style.display = r.value === "Card" ? "block" : "none";
                if (r.value === "Cash") {
                    cardFields.querySelectorAll("input").forEach(i => {
                        i.value = "";
                        i.classList.remove("is-valid", "is-invalid");
                    });
                }
            });
        });

        // Realtime validation
        function validateField(input) {
            if (input.checkValidity()) {
                input.classList.remove("is-invalid");
                input.classList.add("is-valid");
            } else {
                input.classList.remove("is-valid");
                input.classList.add("is-invalid");
            }
        }

        // Bootstrap validation on submit
        (() => {
            'use strict';
            const forms = document.querySelectorAll('.needs-validation');
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        })();
    </script>
}

<style>
    .card-title {
        border-bottom: 2px dashed #dee2e6;
        padding-bottom: 8px;
        margin-bottom: 15px;
    }

    .btn-lg {
        min-height: 50px;
        font-size: 1.2rem;
    }

    img {
        max-height: 180px;
    }
    @@media (max-width: 768px) {
        .row > div

    {
        margin-bottom: 15px;
    }

    }
    /* Bottom to top animation */
    @@keyframes slideUp {
        from

    {
        transform: translateY(100px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }

    }

    .animate-bottom {
        animation: slideUp 0.8s ease-out;
    }
</style>
